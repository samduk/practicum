Description:  This template deploys one VPCs, 3 subnets (1 - public, 2 - Private), IGW, NATGW, Public RT, Private RT, SSM Role for EC2 and a Security Group

Parameters:

  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
  
  Vpc1Name:
    Description: Please enter the name for this VPC
    Type: String
    Default: AVA-POC / efiling
  
  Vpc1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  Vpc1PrivateSubnet1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  Vpc1PrivateSubnet2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  Vpc1PublicSubnet1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
    - t2.nano 
    - t2.micro 
    - t2.small 
    - t2.medium 
    - t2.large 
    - t2.xlarge 
    - t2.2xlarge 
    - t3.nano 
    - t3.micro 
    - t3.small 
    - t3.medium 
    - t3.large 
    - t3.xlarge 
    - t3.2xlarge 


  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  DomainName:
    Type: String
    Default: 'soyala.net'

  
Resources:
  ################# Create VPCs
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Vpc1Name

  ################# Create Internet Gateways and attachments          
  Vpc1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Vpc1Name

  Vpc1InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Vpc1InternetGateway
      VpcId: !Ref Vpc1
 
  ################# Create subnets
  Vpc1PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref Vpc1PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Public Subnet

  Vpc1PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref Vpc1PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private Subnet1

  Vpc1PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref Vpc1PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private Subnet2
  
  ################# Create NAT Gateways
  Vpc1NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: Vpc1InternetGatewayAttachment
    Properties:
      Domain: vpc

  Vpc1NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt Vpc1NatGateway1EIP.AllocationId
      SubnetId: !Ref Vpc1PublicSubnet1

  ################# Create Route Tables
  Vpc1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Public RT
 
  Vpc1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private RT

  ################# Create Routes and Associations
  Vpc1DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Vpc1InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref Vpc1PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Vpc1InternetGateway

  Vpc1PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PublicRouteTable
      SubnetId: !Ref Vpc1PublicSubnet1

  Vpc1DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Vpc1NatGateway1

  Vpc1PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet1

  Vpc1PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet2

  
  ################# Create EC2 Instances
  Vpc1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
      - Ref: Vpc1IngressSecurityGroup
      SubnetId: !Ref Vpc1PrivateSubnet1
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SubnetInstanceProfile
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo su
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "This application is to test AVA connectivity" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-EC2 

  Vpc1ClientEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
      - Ref: Vpc1IngressSecurityGroup
      SubnetId: !Ref Vpc1PrivateSubnet1
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref ClientEC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-ClientEC2 

  Vpc1IngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Vpc1Name}-ingress-securitygroup
      GroupDescription: "Security group allow TCP/80 only"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16

      VpcId: !Ref Vpc1

  Vpc1EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Vpc1Name}-endpoint-securitygroup
      GroupDescription: "Security group allow TCP/443 only"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      VpcId: !Ref Vpc1
      
  APIInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref Vpc1
      SubnetIds: 
        - !Ref Vpc1PrivateSubnet1
        - !Ref Vpc1PrivateSubnet2
      SecurityGroupIds:
        - !Ref Vpc1EndpointSecurityGroup
 
################## SSM Role:
  SubnetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ava-ssm-for-ec2"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
  APIInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "APIInvokeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      
  SubnetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SubnetRole

  ClientEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref APIInvokeRole


  AVALambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - AVALambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  OktaAVATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      Name: 'OktaAVATargets'
      TargetType: lambda
      Targets:
      - Id: !GetAtt [ AVALambdaFunction, Arn ]

  AVALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'AVALambdaRole'
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref AVALambdaPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      
  AVALambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: 'AVALambdaPolicy'
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeInstances'
              - 'ec2:AttachNetworkInterface'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Join ['',['arn:', !Ref AWS::Partition, ':logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/', 'AVALambdaFunction', ':*']]
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'

  AVALambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: AVALambdaFunction.handler
      Role: !GetAtt [ AVALambdaRole, Arn ]
      VpcConfig:
        SecurityGroupIds:
          - Ref: Vpc1IngressSecurityGroup
        SubnetIds:
          - Ref: Vpc1PrivateSubnet1
          - Ref: Vpc1PrivateSubnet2
      FunctionName: AVALambdaFunction
      MemorySize: 128
      Runtime: python3.12
      Timeout: 240
      Code:
          S3Bucket: !Ref MyAssetsBucketName
          S3Key: !Sub "${MyAssetsBucketPrefix}AVALambdaFunction/AVALambdaFunction.zip"

  OktaAVAPrivateALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref Vpc1PrivateSubnet1
        - !Ref Vpc1PrivateSubnet2
      SecurityGroups: 
        - !Ref Vpc1IngressSecurityGroup

  OktaAVAALBListener:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref OktaAVATargetGroup
     LoadBalancerArn: !Ref OktaAVAPrivateALB
     Port: '80'
     Protocol: HTTP

  IAMAVAPrivateALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref Vpc1PrivateSubnet1
        - !Ref Vpc1PrivateSubnet2
      SecurityGroups: 
        - !Ref Vpc1IngressSecurityGroup

  IAMAVAALBListener:
   Type: 'AWS::ElasticLoadBalancingV2::Listener'
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref IAMAVATargetGroup
     LoadBalancerArn: !Ref IAMAVAPrivateALB
     Port: '80'
     Protocol: HTTP

  IAMAVATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      Name: 'IAMAVATargets'
      Port: 80
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref Vpc1
      Targets:
      - Id: !Ref Vpc1EC2Instance

  AVAWorkshopLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/avaworkshop/logs'

  OktaAVAWorkshopLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'okta/avaworkshop/logs'

  ACMLambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ListHostedZonesByName'
                  - 'cloudformation:DescribeStackEvents'
                Resource: '*'
  ACMLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Timeout: '900'
      Handler: ACMLambdaFunction.handler
      Role: !GetAtt ACMLambdaFunctionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - Ref: Vpc1IngressSecurityGroup
        SubnetIds:
          - Ref: Vpc1PrivateSubnet1
          - Ref: Vpc1PrivateSubnet2
      Code:
          S3Bucket: !Ref MyAssetsBucketName
          S3Key: !Sub "${MyAssetsBucketPrefix}ACMLambdaFunction/ACMLambdaFunction.zip"

  ACMDeleteValidationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ListHostedZonesByName'
                  - 'cloudformation:DescribeStackEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
  ACMDeleteValidation:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Timeout: '300'
      Handler: ACMDeleteValidation.handler
      Role: !GetAtt ACMDeleteValidationFunctionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - Ref: Vpc1IngressSecurityGroup
        SubnetIds:
          - Ref: Vpc1PrivateSubnet1
          - Ref: Vpc1PrivateSubnet2
      Code:
          S3Bucket: !Ref MyAssetsBucketName
          S3Key: !Sub "${MyAssetsBucketPrefix}ACMDeleteValidation/ACMDeleteValidation.zip"

  DeleteLambdaFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:DeleteFunction'
                Resource: 
                  - !Join ['',['arn:', !Ref AWS::Partition, ':lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:', !Ref ACMLambdaFunction, ]]
                  - !Join ['',['arn:', !Ref AWS::Partition, ':lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:', !Ref ACMDeleteValidation, ]]

  DeleteLambdaFunctions:
    Type: 'AWS::Lambda::Function'
    DependsOn: ACMCertificateDeleteValidationResource
    Properties:
      Runtime: python3.12
      Timeout: '300'
      Handler: DeleteLambdaFunctions.handler
      Role: !GetAtt DeleteLambdaFunctionsRole.Arn
      Environment:
        Variables:
          Function1: !Ref ACMLambdaFunction
          Function2: !Ref ACMDeleteValidation
      Code:
          S3Bucket: !Ref MyAssetsBucketName
          S3Key: !Sub "${MyAssetsBucketPrefix}DeleteLambdaFunction/DeleteLambdaFunctions.zip"

  ACMCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS

  ACMCertificateValidationResource:
    Type: 'Custom::ACMCertificateValidation'
    Properties:
      ServiceToken: !GetAtt ACMLambdaFunction.Arn
      StackName: !Ref 'AWS::StackName'
  ACMCertificateDeleteValidationResource:
    Type: 'Custom::ACMCertificateDeleteValidationResource'
    DependsOn: ACMCertificate
    Properties:
      ServiceToken: !GetAtt ACMDeleteValidation.Arn
      StackName: !Ref 'AWS::StackName'
  LambdaDeletionResource:
    DependsOn: DeleteLambdaFunctions
    Type: 'Custom::LambdaDeletionResource'
    Properties:
      ServiceToken: !GetAtt DeleteLambdaFunctions.Arn
      StackName: !Ref 'AWS::StackName'

Outputs:
  IAMAVAPrivateALB:
    Value: !Ref IAMAVAPrivateALB
  OktaAVAPrivateALB:
    Value: !Ref OktaAVAPrivateALB
  AVAWorkshopLogGroup:
    Value: !Ref AVAWorkshopLogGroup
  OktaAVAWorkshopLogGroup:
    Value: !Ref OktaAVAWorkshopLogGroup
  Vpc1IngressSecurityGroup:
    Value: !Ref Vpc1IngressSecurityGroup
    Export:
      Name: "Vpc1IngressSecurityGroup"
  Vpc1PrivateSubnet1:
    Value: !Ref Vpc1PrivateSubnet1
    Export:
      Name: "Vpc1PrivateSubnet1"
  Vpc1PrivateSubnet2:
    Value: !Ref Vpc1PrivateSubnet2
    Export:
      Name: "Vpc1PrivateSubnet2"
  DeleteLambdaFunctions:
    Export:
      Name: DeleteLambdaFunctionsARN
    Value:
      Fn::GetAtt: DeleteLambdaFunctions.Arn
  ACMDeleteValidation:
    Export:
      Name: ACMDeleteValidationARN
    Value:
      Fn::GetAtt: ACMDeleteValidation.Arn
  ACMLambdaFunction:
    Export:
      Name: ACMLambdaFunctionARN
    Value:
      Fn::GetAtt: ACMLambdaFunction.Arn

