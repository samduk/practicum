Description: This template deploys one VPC, 3 subnets (1 public, 2 private), IGW, NATGW, public and private RTs, SSM Role for EC2, Security Groups, and Elastic Load Balancers without Lambda functions.

Parameters:
  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
  Vpc1Name:
    Description: Please enter the name for this VPC
    Type: String
    Default: AVA-POC
  Vpc1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  Vpc1PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
  Vpc1PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
  Vpc1PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DomainName:
    Type: String
    Default: 'workshophub.network'

Resources:
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Vpc1Name

  Vpc1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Vpc1Name

  Vpc1InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Vpc1InternetGateway
      VpcId: !Ref Vpc1

  Vpc1PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref Vpc1PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Public Subnet

  Vpc1PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref Vpc1PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private Subnet1

  Vpc1PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref Vpc1PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private Subnet2

  Vpc1NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: Vpc1InternetGatewayAttachment
    Properties:
      Domain: vpc

  Vpc1NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt Vpc1NatGateway1EIP.AllocationId
      SubnetId: !Ref Vpc1PublicSubnet1

  Vpc1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Public RT

  Vpc1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name} Private RT

  Vpc1DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Vpc1InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref Vpc1PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Vpc1InternetGateway

  Vpc1PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PublicRouteTable
      SubnetId: !Ref Vpc1PublicSubnet1

  Vpc1DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Vpc1NatGateway1

  Vpc1PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet1

  Vpc1PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet2

  Vpc1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - Ref: Vpc1IngressSecurityGroup
      SubnetId: !Ref Vpc1PrivateSubnet1
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SubnetInstanceProfile
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo su
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello from ${Vpc1Name}-EC2" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${Vpc1Name}-EC2

  Vpc1IngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Vpc1Name}-ingress-securitygroup
      GroupDescription: "Security group allow HTTP and HTTPS"
      VpcId: !Ref Vpc1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  SubnetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ava-ssm-for-ec2"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  SubnetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: SubnetRole

  OktaAVAPrivateALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref Vpc1PrivateSubnet1
        - !Ref Vpc1PrivateSubnet2
      SecurityGroups: 
        - !Ref Vpc1IngressSecurityGroup

  OktaAVAALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OktaAVATargetGroup
      LoadBalancerArn: !Ref OktaAVAPrivateALB
      Port: 80
      Protocol: HTTP

  OktaAVATargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref Vpc1
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  IAMAVAPrivateALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets:
        - !Ref Vpc1PrivateSubnet1
        - !Ref Vpc1PrivateSubnet2
      SecurityGroups:
        - !Ref Vpc1IngressSecurityGroup

  IAMAVAALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref IAMAVATargetGroup
      LoadBalancerArn: !Ref IAMAVAPrivateALB
      Port: 80
      Protocol: HTTP

  IAMAVATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: 'IAMAVATargets'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref Vpc1
      Targets:
        - Id: !Ref Vpc1EC2Instance

Outputs:
  IAMAVAPrivateALB:
    Description: "ARN of the IAM AVA Private Load Balancer"
    Value: !Ref IAMAVAPrivateALB
  OktaAVAPrivateALB:
    Description: "ARN of the Okta AVA Private Load Balancer"
    Value: !Ref OktaAVAPrivateALB
  Vpc1IngressSecurityGroup:
    Description: "Security Group ID for the VPC"
    Value: !Ref Vpc1IngressSecurityGroup
    Export:
      Name: "Vpc1IngressSecurityGroup"
  Vpc1PrivateSubnet1:
    Description: "Subnet ID for the first private subnet"
    Value: !Ref Vpc1PrivateSubnet1
    Export:
      Name: "Vpc1PrivateSubnet1"
  Vpc1PrivateSubnet2:
    Description: "Subnet ID for the second private subnet"
    Value: !Ref Vpc1PrivateSubnet2
    Export:
      Name: "Vpc1PrivateSubnet2"

